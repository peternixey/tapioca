# typed: true
# frozen_string_literal: true

require "cli_spec"

module Tapioca
  class GenerateSpec < CliSpec
    include TemplateHelper

    FOO_RBI = <<~CONTENTS
      # DO NOT EDIT MANUALLY
      # This is an autogenerated file for types exported from the `foo` gem.
      # Please instead update this file by running `bin/tapioca sync`.

      # typed: true

      module Foo
        class << self
          def bar(a = T.unsafe(nil), b: T.unsafe(nil), **opts); end
        end
      end

      Foo::PI = T.let(T.unsafe(nil), Float)
    CONTENTS

    BAR_RBI = <<~CONTENTS
      # DO NOT EDIT MANUALLY
      # This is an autogenerated file for types exported from the `bar` gem.
      # Please instead update this file by running `bin/tapioca sync`.

      # typed: true

      # typed: true

      module Bar
        class << self
          def bar(a = T.unsafe(nil), b: T.unsafe(nil), **opts); end
        end

        class Test
          sig { params(a: T.nilable(Integer), b: T.nilable(Integer)).void }
          def baz(a = T.unsafe(nil), b = T.unsafe(nil)); end

          sig { params(a: T.nilable(Integer), b: T.nilable(Integer)).void }
          def fizz(a = T.unsafe(nil), b = T.unsafe(nil)); end
        end
      end

      Bar::PI = T.let(T.unsafe(nil), Float)
    CONTENTS

    BAZ_RBI = <<~CONTENTS
      # DO NOT EDIT MANUALLY
      # This is an autogenerated file for types exported from the `baz` gem.
      # Please instead update this file by running `bin/tapioca sync`.

      # typed: true

      module Baz; end

      class Baz::Role
        include ::SmartProperties
        extend ::SmartProperties::ClassMethods
      end

      class Baz::Test
        def fizz; end
      end
    CONTENTS

    describe("#generate") do
      before do
        execute("init")
      end

      it "must show a deprecation warning at top and at bottom" do
        output = execute("generate")

        assert_includes(output, <<~OUTPUT)
          DEPRECATION: The `generate` command will be removed in a future release.

          Start using `bin/tapioca gem --all` instead.

        OUTPUT

        assert_includes(output, <<~OUTPUT)

          DEPRECATION: The `generate` command will be removed in a future release.

          Start using `bin/tapioca gem --all` instead.
        OUTPUT
      end

      it "must show a deprecation warning with supplied gem names" do
        output = execute("generate", ["foo", "bar", "baz"])

        assert_includes(output, <<~OUTPUT)
          DEPRECATION: The `generate` command will be removed in a future release.

          Start using `bin/tapioca gem foo bar baz` instead.

        OUTPUT

        assert_includes(output, <<~OUTPUT)

          DEPRECATION: The `generate` command will be removed in a future release.

          Start using `bin/tapioca gem foo bar baz` instead.
        OUTPUT
      end

      it "must generate a single gem RBI" do
        output = execute("generate", "foo")

        assert_includes(output, <<~OUTPUT)
          Processing 'foo' gem:
            Compiling foo, this may take a few seconds...   Done
        OUTPUT

        assert_path_exists("#{outdir}/foo@0.0.1.rbi")
        assert_equal(FOO_RBI, File.read("#{outdir}/foo@0.0.1.rbi"))

        refute_path_exists("#{outdir}/bar@0.3.0.rbi")
        refute_path_exists("#{outdir}/baz@0.0.2.rbi")
      end

      it "must perform postrequire properly" do
        output = execute("generate", "foo", postrequire: repo_path / "postrequire.rb")

        assert_includes(output, <<~OUTPUT)
          Processing 'foo' gem:
            Compiling foo, this may take a few seconds...   Done
        OUTPUT

        assert_path_exists("#{outdir}/foo@0.0.1.rbi")
        assert_equal(template(<<~CONTENTS), File.read("#{outdir}/foo@0.0.1.rbi"))
          #{FOO_RBI.rstrip}
          class Foo::Secret; end
          <% if ruby_version(">= 2.4.0") %>
          Foo::Secret::VALUE = T.let(T.unsafe(nil), Integer)
          <% else %>
          Foo::Secret::VALUE = T.let(T.unsafe(nil), Fixnum)
          <% end %>
        CONTENTS

        refute_path_exists("#{outdir}/bar@0.3.0.rbi")
        refute_path_exists("#{outdir}/baz@0.0.2.rbi")
      end

      it "explains what went wrong when it can't load the postrequire properly" do
        output = execute("generate", "foo", postrequire: repo_path / "postrequire_faulty.rb")

        output.sub!(%r{/.*/postrequire_faulty\.rb}, "/postrequire_faulty.rb")
        assert_includes(output, <<~OUTPUT)
          Requiring all gems to prepare for compiling... \n
          LoadError: cannot load such file -- foo/will_fail

          Tapioca could not load all the gems required by your application.
          If you populated /postrequire_faulty.rb with `bin/tapioca require`
          you should probably review it and remove the faulty line.
        OUTPUT
      end

      it "must generate multiple gem RBIs" do
        output = execute("generate", ["foo", "bar"])

        assert_includes(output, <<~OUTPUT)
          Processing 'foo' gem:
            Compiling foo, this may take a few seconds...   Done
        OUTPUT

        compiling_spec = "Compiling bar, this may take a few seconds..."
        assert_includes(output, compiling_spec)

        conflict_spec = "Conflicting definitions for `::Bar::Test#foo(a, b)`"
        assert_includes(output, conflict_spec)

        assert_path_exists("#{outdir}/foo@0.0.1.rbi")
        assert_path_exists("#{outdir}/bar@0.3.0.rbi")

        assert_equal(FOO_RBI, File.read("#{outdir}/foo@0.0.1.rbi"))
        assert_equal(BAR_RBI, File.read("#{outdir}/bar@0.3.0.rbi"))

        refute_path_exists("#{outdir}/baz@0.0.2.rbi")
      end

      it "must generate RBIs for all gems in the Gemfile" do
        output = execute("generate")

        compiling_spec = "Compiling bar, this may take a few seconds..."
        assert_includes(output, compiling_spec)

        conflict_spec = "Conflicting definitions for `::Bar::Test#foo(a, b)`"
        assert_includes(output, conflict_spec)

        assert_includes(output, <<~OUTPUT)
          Processing 'baz' gem:
            Compiling baz, this may take a few seconds...   Done
        OUTPUT

        assert_includes(output, <<~OUTPUT)
          Processing 'foo' gem:
            Compiling foo, this may take a few seconds...   Done
        OUTPUT

        assert_path_exists("#{outdir}/foo@0.0.1.rbi")
        assert_path_exists("#{outdir}/bar@0.3.0.rbi")
        assert_path_exists("#{outdir}/baz@0.0.2.rbi")

        assert_equal(FOO_RBI, File.read("#{outdir}/foo@0.0.1.rbi"))
        assert_equal(BAR_RBI, File.read("#{outdir}/bar@0.3.0.rbi"))
        assert_equal(BAZ_RBI, File.read("#{outdir}/baz@0.0.2.rbi"))
      end

      it "must not generate RBIs for missing gem specs" do
        output = execute("generate")

        missing_spec = "  completed with missing specs: minitest-excludes (2.0.1)"
        assert_includes(output, missing_spec)

        compiling_spec = "  Compiling minitest-excludes, this may take a few seconds"
        refute_includes(output, compiling_spec)
      end

      it "must generate git gem RBIs with source revision numbers" do
        output = execute("generate", "ast")

        assert_includes(output, <<~OUTPUT)
          Processing 'ast' gem:
            Compiling ast, this may take a few seconds...   Done
        OUTPUT

        assert_path_exists("#{outdir}/ast@2.4.1-e07a4f66e05ac7972643a8841e336d327ea78ae1.rbi")
      end

      it "must respect exclude option" do
        output = execute("generate", "", exclude: "foo bar fizz")

        compiling_spec = "Compiling bar, this may take a few seconds..."
        refute_includes(output, compiling_spec)

        conflict_spec = "Conflicting definitions for `::Bar::Test#foo(a, b)`"
        refute_includes(output, conflict_spec)

        assert_includes(output, <<~OUTPUT)
          Processing 'baz' gem:
            Compiling baz, this may take a few seconds...   Done
        OUTPUT

        refute_includes(output, <<~OUTPUT)
          Processing 'foo' gem:
            Compiling foo, this may take a few seconds...   Done
        OUTPUT

        compiling_spec = "Compiling fizz, this may take a few seconds..."
        refute_includes(output, compiling_spec)

        conflict_spec = "Conflicting definitions for `::Fizz::<self>#baz(a, b)`"
        refute_includes(output, conflict_spec)

        refute_path_exists("#{outdir}/foo@0.0.1.rbi")
        refute_path_exists("#{outdir}/bar@0.3.0.rbi")
        refute_path_exists("#{outdir}/fizz@0.4.0.rbi")
        assert_path_exists("#{outdir}/baz@0.0.2.rbi")

        assert_equal(BAZ_RBI, File.read("#{outdir}/baz@0.0.2.rbi"))
      end

      it "does not crash when the extras gem is loaded" do
        File.write(repo_path / "sorbet/tapioca/require.rb", 'require "extras/shell"')
        output = execute("generate", "foo")

        assert_includes(output, <<~OUTPUT)
          Processing 'foo' gem:
            Compiling foo, this may take a few seconds...   Done
        OUTPUT

        assert_path_exists("#{outdir}/foo@0.0.1.rbi")
        assert_equal(FOO_RBI, File.read("#{outdir}/foo@0.0.1.rbi"))

        File.delete(repo_path / "sorbet/tapioca/require.rb")
      end
    end
  end
end
